USE [WENGLEE]
GO

/****** Object:  Table [dbo].[USER_CARTON]    Script Date: 5/17/2013 8:47:32 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO

CREATE TABLE [dbo].[USER_CARTON](
	[CARTON_NO] [int] IDENTITY(1,1) NOT NULL,
	[CARTON_VEND_ITEM_NO] [dbo].[T_ITEM_NO] NOT NULL,
	[CARTON_VEND_NO] [dbo].[T_VEND_NO] NOT NULL,
	[CARTON_STATUS_CODE] [int] NULL,
	[CARTON_FULL_BARCODE] [dbo].[T_BARCOD2] NULL,
	[CARTON_PIECES_WEIGHT] [float] NULL,
	[CARTON_DT_RECEIVED] [datetime] NULL,
	[CARTON_DT_PICKED] [datetime] NULL,
	[CARTON_DT_SOLD] [datetime] NULL,
	[CARTON_RECEIVER_NO] [nvarchar](50) NULL,
	[CARTON_SO_NO] [nvarchar](50) NULL,
 CONSTRAINT [PK_USER_CARTON] PRIMARY KEY CLUSTERED 
(
	[CARTON_NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO



USE WENGLEE]
GO

/****** Object:  Table [dbo].[USER_CARTON_STATUS]    Script Date: 5/17/2013 8:48:00 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[USER_CARTON_STATUS](
	[CARTON_STATUIS_STATUS_CODE] [int] NOT NULL,
	[CARTON_STATUS_STATUS_DESC] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_CARTON_STATUS_CODE] PRIMARY KEY CLUSTERED 
(
	[CARTON_STATUIS_STATUS_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO


USE [WENGLEE]
GO

/****** Object:  Table [dbo].[USER_SCANNED_ORDER]    Script Date: 5/17/2013 8:49:03 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO

CREATE TABLE [dbo].[USER_SCANNED_ORDER](
	[SCAN_ORD_ID] [int] IDENTITY(1,1) NOT NULL,
	[SCAN_ORD_CUST_NO] [dbo].[T_CUST_NO] NOT NULL,
	[SCAN_ORD_BARCOD] [dbo].[T_BARCOD2] NOT NULL,
	[SCAN_ORD_ITEM_NO] [dbo].[T_ITEM_NO] NULL,
	[SCAN_ORD_STATUS_CODE] [int] NULL,
	[SCAN_ORD_PIECES_WEIGHT] [float] NULL,
	[SCAN_ORD_PICKING_NO] [nvarchar](50) NULL,
	[SCAN_ORD_DT_SCANNED] [datetime] NULL,
	[SCAN_ORD_IS_WINGLEE] [bit] NULL,
 CONSTRAINT [PK_USER_SCANNED_ORDER] PRIMARY KEY CLUSTERED 
(
	[SCAN_ORD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO


USE [WENGLEE]
GO

/****** Object:  Table [dbo].[USER_SCANNED_ORDER_STATUS]    Script Date: 5/17/2013 8:49:28 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[USER_SCANNED_ORDER_STATUS](
	[SCAN_ORD_STAT_ID] [int] NOT NULL,
	[SCAN_ORD_STAT_DESC] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_USER_SCANNED_ORDER_STATUS] PRIMARY KEY CLUSTERED 
(
	[SCAN_ORD_STAT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO


USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_COMPLETE_ORDER]    Script Date: 5/17/2013 8:50:43 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-05-01
-- Description:	Complete unprocessed order in CounterPoint
-- =============================================

--EXEC USER_SP_MOBILE_COMPLETE_ORDER 'PIC-07:00-20130427004423.593-127.0.0.1', '10000001'

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_COMPLETE_ORDER]
	@PICKING_NO AS VARCHAR(50),
	@CUST_NO AS VARCHAR(50),
	@RESULT VARCHAR(10) = NULL,
	@ERR_MSG VARCHAR(255) = NULL,
	@ORDER_NUMBER_SUBMITTED T_DOC_NO OUTPUT
AS
BEGIN --> 1
	SET NOCOUNT ON

	DECLARE @BILL_TO_CONTACT_ID T_INT_TINY = 1
	DECLARE @SHIP_TO_CONTACT_ID T_INT_TINY = 2
	DECLARE @USR_ID T_USR_ID = 'MOBILE'
	DECLARE @NORM_TAX_COD T_COD = 'LOCAL'
	DECLARE @DRW_ID T_COD = 'IPOD1'
	DECLARE @STA_ID T_COD = 'MOBILE1'
	DECLARE @STR_NO T_SMALLINT = 1
	DECLARE @STA_NO T_SMALLINT = 2
	DECLARE @DOC_ID T_DOC_ID = dbo.fnGenDocId(@STR_NO, @STA_NO, 'O', GETDATE(), 0)
	DECLARE @STR_ID T_COD = '100'
	DECLARE @CURR_WKSTN_NAM T_DB_SYSNAME = 'MOBILE1'
	DECLARE @CURR_SERV_NAM T_DB_SYSNAME = 'WLFSERVER'
	DECLARE @CURR_DB_NAM T_DB_SYSNAME = 'WENGLEE'

	DECLARE @DIM_1_UPR T_GRID_DIM_1 = '*'
	DECLARE @DIM_2_UPR T_GRID_DIM_2 = '*'
	DECLARE @DIM_3_UPR T_GRID_DIM_3 = '*'
	DECLARE @EXT_CUBE T_CUBE = 0
	DECLARE @ORIG_MIX_MATCH_GRP_TOT DECIMAL(15,4)
	DECLARE @ORIG_ITEM_TOT_QTY T_QTY = 0 
	DECLARE @ORIG_PRIOR_LIN_MIX_MATCH_GRP_TOT DECIMAL(15,4) = 0
	DECLARE @ORIG_PRIOR_LIN_ITEM_TOT_QTY DECIMAL(15,4) = 0
	DECLARE @UNIT_FLG T_FLG = 0
	
	DECLARE @STK_LOC_ID T_LOC_ID
	DECLARE @PRC_LOC_ID T_LOC_ID
	DECLARE @SESS_ID T_GUID = NEWID() 
	DECLARE @LIN_SESS_ID T_GUID 
	DECLARE @UNIT_NAM T_UNIT
	DECLARE @UnitPrice DECIMAL(15,4)
	DECLARE @ExtPrice DECIMAL(15,4)
	DECLARE @ExtPriceOnSale DECIMAL(15,4)
	DECLARE @QtyOnSale DECIMAL(15,4)
	DECLARE @PrcCalcDetail varchar(8000)
	DECLARE @GroupsChecked INTEGER
	DECLARE @RulesChecked INTEGER
	DECLARE @RegularPrice DECIMAL(15,4)
	DECLARE @UnitRetailValue DECIMAL(15,4)
	DECLARE @Price1 DECIMAL(15,4)
	DECLARE @ThisLineMixMatchContrib DECIMAL(15,4)
	DECLARE @PtsProgram VARCHAR(10)
	DECLARE @PtsProgramDescr VARCHAR(30)
	DECLARE @PtsEarnRuleSeqNo INTEGER
	DECLARE @PtsEarnRuleDescr VARCHAR(30)
	DECLARE @PtsEarnRulesChecked INTEGER
	DECLARE @PtsEarnCustomSP VARCHAR(100)
	DECLARE @PtsEarnPtsPerAmt DECIMAL(15,4)
	DECLARE @PtsEarnPtsPerStkUnit DECIMAL(15,4)
	DECLARE @PtsEarnOnSaleItems VARCHAR(1)
	DECLARE @PtsEarnOnPrcOvrd VARCHAR(1)
	DECLARE @PtsRedeemEligible VARCHAR(1)
	DECLARE @PtsRedeemRuleSeqNo INTEGER
	DECLARE @PtsRedeemRuleDescr VARCHAR(30)
	DECLARE @PtsRedeemRulesChecked INTEGER
	DECLARE @LIN_SEQ_NO INTEGER = 0
	DECLARE @getScannedData CURSOR
	DECLARE @SCAN_ORD_ID INT
	DECLARE @SCAN_ORD_ITEM_NO T_ITEM_NO 
	DECLARE @SCAN_ORD_PIECES_WEIGHT FLOAT 
	DECLARE @SCAN_ORD_DT_SCANNED DATETIME
	DECLARE @ORD_LINES INT = 0
	DECLARE @DESCR_UPR T_DESCR 
	DECLARE @CATEG_COD T_COD 
	DECLARE @SUBCAT_COD T_COD 
	DECLARE @ITEM_VEND_NO T_VEND_NO 
	DECLARE @IS_TXBL T_BOOL 
	DECLARE @ITEM_TYP T_FLG 
	DECLARE @QTY_DECS T_INT 
	DECLARE @PRC_DECS T_INT 
	DECLARE @BARCOD T_BARCOD 
	DECLARE @IS_FOOD_STMP_ITEM T_BOOL 
	DECLARE @ITEM_WEIGHT T_WEIGHT 
	DECLARE @CUBE T_CUBE
	DECLARE @IS_KIT_PAR T_BOOL 
	DECLARE @IS_DISCNTBL T_BOOL
	DECLARE @TRK_METH T_FLG
	DECLARE @TAX_CATEG_COD T_COD
	DECLARE @STK_UNIT T_UNIT
	DECLARE @PREF_UNIT T_UNIT
	DECLARE @PREF_UNIT_DENOM NUMERIC(12,1)
	DECLARE @UNIT_COST T_COST
	DECLARE @PREF_UNIT_NUMER NUMERIC(12,1)
	DECLARE @PFT_CTR T_ACCT_NO
	DECLARE @NXT_ORD_NO T_DOC_NO
	DECLARE @TAX_COD T_COD
	DECLARE @TERMS_COD T_COD
	DECLARE @PS_PROMPT_COD_1 T_COD
	DECLARE @SCAN_ORD_BARCOD VARCHAR(52)
	DECLARE @SCAN_ORD_IS_WINGLEE BIT

	-- VARIABLES FOR PS_DOC_HDR_TOT TABLE
	DECLARE @HT_LINS_O T_INT = 0
	DECLARE @HT_LINS_R T_INT = 0
	DECLARE @HT_SUB_TOT T_MONEY = 0
	DECLARE @HT_TOT_EXT_COST T_MONEY = 0
	DECLARE @HT_TOT_WEIGHT T_WEIGHT = 0
	DECLARE @HT_TOT T_MONEY = 0
	DECLARE @HT_AMT_DUE T_MONEY = 0
	DECLARE @HT_TOT_HDR_DISCNTBL_AMT T_MONEY = 0
	
	-- -----------------------------------------------------
	-- GET CONFIGURATION VALUES FROM PS_STR_CFG_PS
	-- -----------------------------------------------------
	SELECT @PFT_CTR = PFT_CTR, @STK_LOC_ID = STK_LOC_ID, @PRC_LOC_ID = PRC_LOC_ID, @NXT_ORD_NO = NXT_ORD_NO
	FROM PS_STR_CFG_PS
	WHERE STR_ID = @STR_ID
	
	IF @STK_LOC_ID > 0 
		SELECT @RESULT = 'SUCCESS'
	ELSE
		BEGIN --> 2
			SELECT @RESULT = 'FAILURE'
			SET @ERR_MSG = 'UNABLE TO RETRIEVE CONFIG VALUES FROM CONFIG TABLE IN CP.'
			RAISERROR(@ERR_MSG, 18, 1)
			RETURN		
		END --< 2

	-- -----------------------------------------------------
	-- GET CUSTOMER INFO
	-- -----------------------------------------------------
	SELECT @TERMS_COD = TERMS_COD, @TAX_COD = TAX_COD
	FROM AR_CUST
	WHERE CUST_NO = @CUST_NO

	-- KCK: MATT - SHOULD NULL VALUES IN THE ABOVE SELECT RESULT IN A FATAL ERROR?  IF SO, I'LL UNCOMMENT THE BELOW ERROR HANDLING
	--IF @TERMS_COD > 0 
	--	SELECT @RESULT = 'SUCCESS'
	--ELSE
	--	BEGIN --> 2
	--		SELECT @RESULT = 'FAILURE'
	--		SET @ERR_MSG = 'UNABLE TO RETRIEVE CUSTOMER TERMS AND/OR TAX COD INFO FROM CUSTOMER TABLE IN CP.'
	--		RAISERROR(@ERR_MSG, 18, 1)
	--		RETURN		
	--	END --< 2

	-- -----------------------------------------------------
	-- GET COUNT OF ORDER LINES
	-- -----------------------------------------------------
	SET @ORD_LINES = (
		SELECT COUNT(*)
		FROM USER_SCANNED_ORDER
		WHERE SCAN_ORD_PICKING_NO = @PICKING_NO
			AND SCAN_ORD_CUST_NO = @CUST_NO
			AND SCAN_ORD_STATUS_CODE = 0 /* MAY NEED TO ADJUST THIS VALUE */
	)

	IF @ORD_LINES > 0 
		SELECT @RESULT = 'SUCCESS'
	ELSE
	BEGIN --> 2
		SELECT @RESULT = 'FAILURE'
		SET @ERR_MSG = 'NO QUALIFYING ORDER LINE ITEM RECORDS FOUND.'
		RAISERROR(@ERR_MSG, 18, 1)
		RETURN		
	END --< 2

	BEGIN TRANSACTION T1;

	BEGIN TRY --> 2
		-- -----------------------------------------------------
		-- INSERT RECORD IN PS_DOC_HDR TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_HDR (DOC_ID, STR_ID, STA_ID, TKT_NO, DOC_TYP, SAL_LINS, ORD_LINS, SAL_LIN_TOT, GFC_LINS, BO_LINS, SO_LINS, DRW_ID, 
			DRW_SESSION_ID, CUST_NO, RET_LINS, SHIP_VIA_COD, RET_LIN_TOT, SHIP_ZONE_COD, TAX_COD, TERMS_COD, CUST_PO_NO, TKT_TYP, USR_ID, SLS_REP, 
			STK_LOC_ID, PRC_LOC_ID, SVC_LINS, PFT_CTR, VOID_USR_ID, VOID_REAS, TAX_EXEMPT_NO, TAX_OVRD_REAS, DOC_GUID, BILL_TO_CONTACT_ID, 
			SHIP_TO_CONTACT_ID, REQ_REPRICE, SHIP_DAT, RS_UTC_DT, IS_DOC_COMMITTED, LST_FRM_GRP_PRTD, LST_FRM_PRTD, FOOD_STMP_AMT, FOOD_STMP_LINS,
			FOOD_STMP_TAX_AMT, TIMES_PRTD, ERR_REF, TKT_DT, IS_REL_TKT, FOOD_STMP_NORM_TAX_AMT, LOY_PGM_COD, NORM_TAX_COD, DATA_UPGRADE_STAT, REF, 
			HAS_ENTD_LINS, HAS_PCKD_LINS, HAS_PCKVRFD_LINS, HAS_INVCD_LINS, HAS_RLSD_LINS, TO_REL_LINS, TO_LEAVE_LINS, LST_MAINT_DT, LST_MAINT_USR_ID,
			IS_OFFLINE, RS_STAT, DS_LINS)
		VALUES (@DOC_ID, @STR_ID, @STA_ID, @NXT_ORD_NO, 'O', 0, @ORD_LINES, 0, 0, 0, 0, @DRW_ID, NULL, @CUST_NO, 0, NULL, 0, NULL, @TAX_COD, 
			@TERMS_COD, NULL, 'T', @USR_ID, NULL, @STK_LOC_ID, @PRC_LOC_ID, 0, @PFT_CTR, NULL, NULL, NULL, NULL, @SESS_ID, @BILL_TO_CONTACT_ID, 
			@SHIP_TO_CONTACT_ID, 'N', NULL, GETUTCDATE(), 'N', 'TICKET-BO', 'OrderPrompts13.rpt', 0, 0,	0, 1, NULL, GETDATE(), 'N', 0, NULL, 
			@NORM_TAX_COD, NULL, NULL, 'Y', 'N', 'N', 'N', 'N', 0, 0, GETDATE(), @USR_ID, 0, 1, 0)


		-- -----------------------------------------------------
		-- INSERT RECORD IN PS_DOC_HDR_DOC_STAT TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_HDR_DOC_STAT (DOC_ID, LST_DOC_ACTIV, DOC_AS_TKT_SEQ_NO, DOC_STAT, LST_CANCEL_DEP_REFUNDED, LST_CANCEL_DEP_FORFEIT, 
			TOT_DEP_RECEIVED, TOT_DEP_APPLIED, TOT_DEP_REFUNDED, TOT_DEP_FORFEIT, IS_SUSPENDED, PREQ_WRKGRP_ID)
		VALUES (@DOC_ID, 'N', 0, 'O', 0, 0, 0, 0, 0, 0, 'N', 1)

		-- -----------------------------------------------------
		-- GET SCANNED DATA
		-- -----------------------------------------------------
		SET @getScannedData = CURSOR FOR
			SELECT SCAN_ORD_ID, SCAN_ORD_ITEM_NO, SCAN_ORD_PIECES_WEIGHT, SCAN_ORD_DT_SCANNED, SCAN_ORD_BARCOD, SCAN_ORD_IS_WINGLEE
			FROM USER_SCANNED_ORDER
			WHERE SCAN_ORD_PICKING_NO = @PICKING_NO
				AND SCAN_ORD_CUST_NO = @CUST_NO
				AND SCAN_ORD_STATUS_CODE = 0 /* MAY NEED TO ADJUST THIS VALUE */
			OPEN @getScannedData
		FETCH NEXT
		FROM @getScannedData 
		INTO @SCAN_ORD_ID, @SCAN_ORD_ITEM_NO, @SCAN_ORD_PIECES_WEIGHT, @SCAN_ORD_DT_SCANNED, @SCAN_ORD_BARCOD, @SCAN_ORD_IS_WINGLEE
		WHILE @@FETCH_STATUS = 0
		BEGIN --> 3
			SET @LIN_SESS_ID = NEWID()
			SET @LIN_SEQ_NO = @LIN_SEQ_NO + 1
			-- -----------------------------------------------------
			-- GET ITEM INFO FROM IM_ITEM TABLE
			-- -----------------------------------------------------
			SELECT @DESCR_UPR = DESCR_UPR, @CATEG_COD = CATEG_COD, @SUBCAT_COD = SUBCAT_COD, @ITEM_VEND_NO = ITEM_VEND_NO, @IS_TXBL = IS_TXBL, 
				@ITEM_TYP = ITEM_TYP, @QTY_DECS = QTY_DECS, @PRC_DECS = PRC_DECS, @BARCOD = BARCOD, @IS_FOOD_STMP_ITEM = IS_FOOD_STMP_ITEM, 
				@ITEM_WEIGHT = [WEIGHT], @CUBE = [CUBE],	@IS_KIT_PAR = IS_KIT_PAR, @IS_DISCNTBL = IS_DISCNTBL, @TRK_METH = TRK_METH, @TAX_CATEG_COD = TAX_CATEG_COD,
				@IS_TXBL = IS_TXBL, @STK_UNIT = STK_UNIT, @PREF_UNIT = PREF_UNIT, @PREF_UNIT_DENOM = PREF_UNIT_DENOM, @UNIT_COST = UNIT_COST, 
				@PREF_UNIT_NUMER = PREF_UNIT_NUMER, @UNIT_NAM = PREF_UNIT_NAM, @PS_PROMPT_COD_1 = PS_PROMPT_COD_1
			FROM IM_ITEM
				INNER JOIN PO_VEND_ITEM ON IM_ITEM.ITEM_NO = PO_VEND_ITEM.ITEM_NO
			WHERE IM_ITEM.ITEM_NO = @SCAN_ORD_ITEM_NO

			IF(@@ROWCOUNT > 0)
				SELECT @RESULT = 'SUCCESS'
			ELSE
			BEGIN --> 4
				SELECT @RESULT = 'FAILURE'
				SET @ERR_MSG = 'UNABLE TO RETRIEVE IM_ITEM AND/OR PO_VEND_ITEM DATA FOR TABLE FOR SEQ #' + CONVERT(VARCHAR(10), @LIN_SEQ_NO) +
					CONVERT(VARCHAR(20), @SCAN_ORD_ITEM_NO) 
				RAISERROR(@ERR_MSG, 18, 1)
				RETURN			
			END --< 4

			-- -----------------------------------------------------
			-- CREATE ENTRY IN IM_PRC_WRK
			-- -----------------------------------------------------	
			INSERT INTO IM_PRC_WRK (SESS_ID, LIN_SESS_ID, STK_LOC_ID, PRC_LOC_ID, STR_ID, DRW_ID, SAL_DT, SAL_DAT, SAL_TIM, SAL_DAY_OF_WEEK, ORIG_QTY, 
				UNIT_FLG, UNIT_NAM, DIM_1_UPR, DIM_2_UPR, DIM_3_UPR, ITEM_NO, CUST_NO, EXT_WEIGHT, EXT_CUBE, ORIG_MIX_MATCH_GRP_TOT, ORIG_ITEM_TOT_QTY, 
				ORIG_PRIOR_LIN_MIX_MATCH_GRP_TOT, ORIG_PRIOR_LIN_ITEM_TOT_QTY)
			VALUES (@SESS_ID, @LIN_SESS_ID, @STK_LOC_ID, @PRC_LOC_ID, @STR_ID, @DRW_ID, @SCAN_ORD_DT_SCANNED, CONVERT(DATE, @SCAN_ORD_DT_SCANNED), 
				'Dec 30 1899  ' + CONVERT(VARCHAR(10), @SCAN_ORD_DT_SCANNED, 108), CONVERT(VARCHAR(1),DATEPART(DW, @SCAN_ORD_DT_SCANNED)), 
				@SCAN_ORD_PIECES_WEIGHT, @UNIT_FLG, @UNIT_NAM, @DIM_1_UPR, @DIM_1_UPR, @DIM_3_UPR, @SCAN_ORD_ITEM_NO, @CUST_NO, @SCAN_ORD_PIECES_WEIGHT, 
				@EXT_CUBE, @ORIG_MIX_MATCH_GRP_TOT, @ORIG_ITEM_TOT_QTY, @ORIG_PRIOR_LIN_MIX_MATCH_GRP_TOT, @ORIG_PRIOR_LIN_ITEM_TOT_QTY)

						
			-- -----------------------------------------------------
			-- GET PRICING INFO
			-- -----------------------------------------------------	
			exec USP_GET_PRICE_AND_POINTS @SESS_ID, @LIN_SESS_ID, 'N', @UnitPrice output, @ExtPrice output, @ExtPriceOnSale output, @QtyOnSale	output,
				 @PrcCalcDetail output, @GroupsChecked output, @RulesChecked output, @RegularPrice output, @UnitRetailValue output, @Price1 output, 
				 @ThisLineMixMatchContrib output, @PtsProgram output, @PtsProgramDescr output, @PtsEarnRuleSeqNo output, @PtsEarnRuleDescr output, 
				 @PtsEarnRulesChecked output, @PtsEarnCustomSP output, @PtsEarnPtsPerAmt output, @PtsEarnPtsPerStkUnit output, @PtsEarnOnSaleItems output, 
				 @PtsEarnOnPrcOvrd output, @PtsRedeemEligible output, @PtsRedeemRuleSeqNo output, @PtsRedeemRuleDescr output, @PtsRedeemRulesChecked output

			-- -----------------------------------------------------
			-- INSERT RECORD IN PS_DOC_LIN TABLE 
			-- -----------------------------------------------------
			INSERT INTO PS_DOC_LIN (DOC_ID, LIN_SEQ_NO, STR_ID, STA_ID, TKT_NO, LIN_TYP, PRC, ITEM_NO, UNIT_RETL_VAL, CALC_PRC, EXT_COST, STK_LOC_ID, 
				REG_PRC, PRC_LOC_ID, DESCR, CATEG_COD, SUBCAT_COD, ITEM_VEND_NO, QTY_SOLD, QTY_NUMER, QTY_DENOM, QTY_UNIT, SELL_UNIT, EXT_PRC, IS_TXBL, 
				PFT_CTR , SLS_REP, ITEM_TYP, PRC_1, QTY_DECS, PRC_DECS, BARCOD, IS_SINGLE_CELL, NORM_TAX_CATEG, TAX_CATEG, NORM_IS_TXBL, TRK_METH, 
				ORIG_QTY, QTY_SHIPPED, IS_FOOD_STMP_ELIG, UNIT_WEIGHT, UNIT_CUBE, LIN_GUID, DIM_1_UPR, DIM_2_UPR, DIM_3_UPR, UNIT_COST, 
				QTY_RET, IS_VAL_RET, GROSS_EXT_PRC, DISP_EXT_PRC, IS_KIT_PAR, HAS_PRC_OVRD, PRESUMED_COST, COST_OF_SLS_PCT, MIX_MATCH_CONTRIB, 
				MIX_MATCH_PRC_BASED_ON, USR_ENTD_PRC, GROSS_DISP_EXT_PRC, IS_DISCNTBL, CALC_EXT_PRC, QTY_ENTD, QTY_PCKD, QTY_PCKVRFD, QTY_INVCD, 
				QTY_TO_FILL, QTY_TO_REL, QTY_TO_LEAVE, LIN_GRP_GUID)
			VALUES(@DOC_ID, @LIN_SEQ_NO, @STR_ID, @STA_ID, @NXT_ORD_NO, 'O', @UnitPrice, @SCAN_ORD_ITEM_NO, @UnitRetailValue, @ExtPrice, 
				(@UNIT_COST * @SCAN_ORD_PIECES_WEIGHT), @STK_LOC_ID, @RegularPrice, @PRC_LOC_ID, @DESCR_UPR, @CATEG_COD, @SUBCAT_COD, @ITEM_VEND_NO, 
				@SCAN_ORD_PIECES_WEIGHT, @PREF_UNIT_NUMER, @PREF_UNIT_DENOM, @STK_UNIT, @PREF_UNIT, @ExtPrice, @IS_TXBL, @PFT_CTR, '', @ITEM_TYP, @Price1, 
				@QTY_DECS, @PRC_DECS, @BARCOD, 'N', @TAX_CATEG_COD, @TAX_CATEG_COD, @IS_TXBL, @TRK_METH, @SCAN_ORD_PIECES_WEIGHT, 0, @IS_FOOD_STMP_ITEM, 
				0, @CUBE, @LIN_SESS_ID, @DIM_1_UPR, @DIM_2_UPR, @DIM_3_UPR, @UNIT_COST, 0, 'N', @ExtPrice, @ExtPrice, @IS_KIT_PAR, @PtsEarnOnPrcOvrd, @UNIT_COST, 0, 0, 
				'!', 'N', @ExtPrice, @IS_DISCNTBL, @ExtPrice, @SCAN_ORD_PIECES_WEIGHT, 0, 0, 0, 0, @SCAN_ORD_PIECES_WEIGHT, 0, NULL)

			IF(@@ROWCOUNT > 0)
				SELECT @RESULT = 'SUCCESS'
			ELSE
			BEGIN --> 4
				SELECT @RESULT = 'FAILURE'
				SET @ERR_MSG = 'NO RECORD INSERTED INTO ORDER LINE TABLE FOR SEQ #' + CONVERT(VARCHAR(10), @LIN_SEQ_NO)
				RAISERROR(@ERR_MSG, 18, 1)
				RETURN			
			END --< 4

			-- -----------------------------------------------------
			-- ADD UP TOTALS FOR PS_DOC_HDR_TOT TABLE 'O' AND 'R' RECORDS
			-- -----------------------------------------------------
			IF @PtsEarnOnPrcOvrd = 'Y'
			BEGIN --> 4
				SET @HT_LINS_O = @HT_LINS_O + 1
			END --< 4
			ELSE
			BEGIN --> 4
				SET @HT_LINS_R = @HT_LINS_R + 1
				SET @HT_LINS_O = @HT_LINS_O + 1
			END --< 4

			SET @HT_SUB_TOT = @HT_SUB_TOT + ISNULL(@ExtPrice, 0)
			SET @HT_TOT_EXT_COST = @HT_TOT_EXT_COST + ISNULL((@UNIT_COST * @SCAN_ORD_PIECES_WEIGHT), 0)
			SET @HT_TOT = @HT_TOT + ISNULL(@ExtPrice, 0)
			SET @HT_AMT_DUE = @HT_AMT_DUE + ISNULL(@ExtPrice, 0)
			SET @HT_TOT_HDR_DISCNTBL_AMT = @HT_TOT_HDR_DISCNTBL_AMT + ISNULL(@ExtPrice, 0)
			
			
			IF LEN(@PS_PROMPT_COD_1) > 0
			BEGIN --> 4
				-- -----------------------------------------------------
				-- INSERT RECORD IN PS_DOC_LIN_PROMPT TABLE
				-- -----------------------------------------------------
				INSERT INTO PS_DOC_LIN_PROMPT (DOC_ID, LIN_SEQ_NO, PROMPT_SEQ_NO, PROMPT_NO, PROMPT_COD, PROMPT_ALPHA, PROMPT_DAT, PROMPT_STR)
				VALUES (@DOC_ID, @LIN_SEQ_NO, 1, 1, @PS_PROMPT_COD_1, NULL, NULL, 1)

				IF(@@ROWCOUNT > 0)
					SELECT @RESULT = 'SUCCESS'
				ELSE
				BEGIN --> 5
					SELECT @RESULT = 'FAILURE'
					SET @ERR_MSG = 'NO RECORD INSERTED INTO LINE PRICE PROMPT TABLE FOR SEQ #' + CONVERT(VARCHAR(10), @LIN_SEQ_NO)
					RAISERROR(@ERR_MSG, 18, 1)
					RETURN			
				END --< 5
			END --< 4


			-- -----------------------------------------------------
			-- INSERT RECORD IN PS_DOC_LIN_EXT TABLE
			-- -----------------------------------------------------	
			INSERT INTO PS_DOC_LIN_EXT (DOC_ID_EXT, LIN_SEQ_NO_EXT, CASE_1, FULL_WING_LEE_BARCOD)
			VALUES (@DOC_ID, @LIN_SEQ_NO, NULL, CASE WHEN @SCAN_ORD_IS_WINGLEE = 1 THEN @SCAN_ORD_BARCOD ELSE NULL END)

			IF(@@ROWCOUNT > 0)
				SELECT @RESULT = 'SUCCESS'
			ELSE
			BEGIN --> 5
				SELECT @RESULT = 'FAILURE'
				SET @ERR_MSG = 'NO RECORD INSERTED INTO LINE PRICE EXT TABLE FOR SEQ #' + CONVERT(VARCHAR(10), @LIN_SEQ_NO)
				RAISERROR(@ERR_MSG, 18, 1)
				RETURN			
			END --< 5
		
			-- -----------------------------------------------------
			-- INSERT RECORD IN PS_DOC_LIN_PRICE TABLE
			-- -----------------------------------------------------
			INSERT INTO PS_DOC_LIN_PRICE (DOC_ID, LIN_SEQ_NO, PRC_JUST_STR, PRC_GRP_COD, PRC_GRP_DESCR, PRC_RUL_DESCR, PRC_GRP_TYP, PRC_RUL_SEQ_NO, 
				PRC_BRK_DESCR, PRC_SEQ_NO, QTY_PRCD, UNIT_PRC, DIM_1_UPR, DIM_2_UPR, DIM_3_UPR)
			VALUES (@DOC_ID, @LIN_SEQ_NO, 'Special', 'RESTAURANT', 'RESTAURANTS', 'RESTAURANT CUSTOMERS', 'S', 3, 'Price-2', 1, @SCAN_ORD_PIECES_WEIGHT,
				@UnitPrice, @DIM_1_UPR, @DIM_2_UPR, @DIM_3_UPR)			

			IF(@@ROWCOUNT > 0)
				SELECT @RESULT = 'SUCCESS'
			ELSE
			BEGIN --> 4
				SELECT @RESULT = 'FAILURE'
				SET @ERR_MSG = 'NO RECORD INSERTED INTO LINE PRICE TABLE FOR SEQ #' + CONVERT(VARCHAR(10), @LIN_SEQ_NO) 
				RAISERROR(@ERR_MSG, 18, 1)
				RETURN			
			END --< 4

			IF @SCAN_ORD_IS_WINGLEE = 1
			BEGIN --> 4
				-- -----------------------------------------------------
				-- UPDATE USER_CARTON_TABLE 
				-- -----------------------------------------------------
				UPDATE USER_CARTON
				SET CARTON_STATUS_CODE = 30, /* MAY NEED TO CHANGE THIS ON POS ORDER/PICKED? OR SOLD? */
				CARTON_DT_PICKED = GETDATE(), /* MAY NEED TO CHANGE THIS ON POS ORDER/PICKED? OR SOLD? */
				CARTON_DT_SOLD = GETDATE(),
				CARTON_SO_NO = @NXT_ORD_NO
				WHERE CARTON_FULL_BARCODE = @SCAN_ORD_BARCOD
				
				IF(@@ROWCOUNT > 0)
					SELECT @RESULT = 'SUCCESS'
				ELSE
				BEGIN --> 5
					SELECT @RESULT = 'FAILURE'
					SET @ERR_MSG = 'USER CARTON TABLE NOT UPDATED FOR SEQ #' + CONVERT(VARCHAR(10), @LIN_SEQ_NO)
					RAISERROR(@ERR_MSG, 18, 1)
					RETURN			
				END --< 5
			END --< 4
			
			-- -----------------------------------------------------
			-- UPDATE USER_SCANNED_ORDER_TABLE
			-- -----------------------------------------------------
			UPDATE USER_SCANNED_ORDER
			SET SCAN_ORD_STATUS_CODE = 10 -- UNPROCESSED ORDER IN CP
			WHERE SCAN_ORD_ID = @SCAN_ORD_ID

			IF(@@ROWCOUNT > 0)
				SELECT @RESULT = 'SUCCESS'
			ELSE
			BEGIN --> 3
				SELECT @RESULT = 'FAILURE'
				SET @ERR_MSG = 'USER SCANNED ORDER TABLE NOT UPDATED FOR SEQ #' + CONVERT(VARCHAR(10), @LIN_SEQ_NO)
				RAISERROR(@ERR_MSG, 18, 1)
				--ROLLBACK TRAN T1;
				RETURN			
			END --< 3
					
			FETCH NEXT
			FROM @getScannedData 
			INTO @SCAN_ORD_ID, @SCAN_ORD_ITEM_NO, @SCAN_ORD_PIECES_WEIGHT, @SCAN_ORD_DT_SCANNED, @SCAN_ORD_BARCOD, @SCAN_ORD_IS_WINGLEE
		END --< 3
		CLOSE @getScannedData
		DEALLOCATE @getScannedData

		-- -----------------------------------------------------
		-- INSERT 'O' RECORD INTO PS_DOC_HDR_TOT TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_HDR_TOT (DOC_ID, TOT_TYP, INITIAL_MIN_DUE, HAS_TAX_OVRD, TAX_AMT_SHIPPED, LINS, TOT_GFC_AMT, TOT_SVC_AMT, SUB_TOT, 
			TAX_OVRD_LINS, TOT_EXT_COST, TOT_MISC, TAX_AMT, NORM_TAX_AMT, TOT_TND, TOT_CHNG, TOT_WEIGHT, TOT_CUBE, TOT, AMT_DUE, TOT_HDR_DISC,
			TOT_LIN_DISC, TOT_HDR_DISCNTBL_AMT)
		VALUES (@DOC_ID, 'O', 0, '!', 0, @HT_LINS_O, 0, 0, @HT_SUB_TOT, 0, @HT_TOT_EXT_COST, 0, 0, 0, 0, 0, @HT_TOT_WEIGHT, 0, @HT_TOT, @HT_AMT_DUE, 0,
			0, @HT_TOT_HDR_DISCNTBL_AMT)
	
		-- -----------------------------------------------------
		-- INSERT 'R' RECORD INTO PS_DOC_HDR_TOT TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_HDR_TOT (DOC_ID, TOT_TYP, INITIAL_MIN_DUE, HAS_TAX_OVRD, TAX_AMT_SHIPPED, LINS, TOT_GFC_AMT, TOT_SVC_AMT, SUB_TOT, 
			TAX_OVRD_LINS, TOT_EXT_COST, TOT_MISC, TAX_AMT, NORM_TAX_AMT, TOT_TND, TOT_CHNG, TOT_WEIGHT, TOT_CUBE, TOT, AMT_DUE, TOT_HDR_DISC,
			TOT_LIN_DISC, TOT_HDR_DISCNTBL_AMT)
		VALUES (@DOC_ID, 'R', 0, '!', 0, @HT_LINS_R, 0, 0, @HT_SUB_TOT, 0, @HT_TOT_EXT_COST, 0, 0, 0, 0, 0, @HT_TOT_WEIGHT, 0, @HT_TOT, @HT_AMT_DUE, 0,
			0, @HT_TOT_HDR_DISCNTBL_AMT)

		-- -----------------------------------------------------
		-- INSERT 'V' RECORD INTO PS_DOC_HDR_TOT TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_HDR_TOT (DOC_ID, TOT_TYP, INITIAL_MIN_DUE, HAS_TAX_OVRD, TAX_AMT_SHIPPED, LINS, TOT_GFC_AMT, TOT_SVC_AMT, SUB_TOT, 
			TAX_OVRD_LINS, TOT_EXT_COST, TOT_MISC, TAX_AMT, NORM_TAX_AMT, TOT_TND, TOT_CHNG, TOT_WEIGHT, TOT_CUBE, TOT, AMT_DUE, TOT_HDR_DISC,
			TOT_LIN_DISC, TOT_HDR_DISCNTBL_AMT)
		VALUES (@DOC_ID, 'V', 0, '!', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

		-- -----------------------------------------------------
		-- INSERT RECORD IN PS_DOC_HDR_MISC_CHRG TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_HDR_MISC_CHRG (DOC_ID, TOT_TYP, MISC_CHRG_NO, MISC_TYP, MISC_AMT, MISC_PCT, MISC_AMT_SHIPPED)
		VALUES (@DOC_ID, 'O', 1, 'A', 0, 0, 0)

		-- -----------------------------------------------------
		-- INSERT RECORD INTO PS_DOC_AUDIT_LOG TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_AUDIT_LOG (DOC_ID, LOG_SEQ_NO, DOC_TYP, DOC_GUID, CURR_DT, CURR_STR_ID, CURR_STA_ID, CURR_DRW_ID, CURR_USR_ID, 
			CURR_WKSTN_NAM, CURR_SERV_NAM, CURR_DB_NAM, ACTIV, LOG_ENTRY)
		VALUES (@DOC_ID, 1, 'O', @SESS_ID, GETDATE(), @STR_ID, @STA_ID, @DRW_ID, @USR_ID, @CURR_WKSTN_NAM, @CURR_SERV_NAM, @CURR_DB_NAM, 'N', 
			'Entered a new order')

		-- -----------------------------------------------------
		-- INSERT 'O' RECORD INTO PS_DOC_AUDIT_LOG_TOT TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_AUDIT_LOG_TOT (DOC_ID, LOG_SEQ_NO, TOT_TYP, TOT_GFC_AMT, LINS, SUB_TOT, TOT_MISC, NORM_TAX_AMT, TAX_AMT, TOT_EXT_COST, 
			TOT_TND, TOT_CHNG, AMT_DUE, TOT_SVC_AMT, DEP_NET_CHANGE, TOT)
		VALUES (@DOC_ID, 1, 'O', 0, @HT_LINS_O, @HT_SUB_TOT, 0, 0, 0, @HT_TOT_EXT_COST, 0, 0, @HT_AMT_DUE, 0, 0, @HT_TOT)

		-- -----------------------------------------------------
		-- INSERT 'R' RECORD INTO PS_DOC_AUDIT_LOG_TOT TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_AUDIT_LOG_TOT (DOC_ID, LOG_SEQ_NO, TOT_TYP, TOT_GFC_AMT, LINS, SUB_TOT, TOT_MISC, NORM_TAX_AMT, TAX_AMT, TOT_EXT_COST, 
			TOT_TND, TOT_CHNG, AMT_DUE, TOT_SVC_AMT, DEP_NET_CHANGE, TOT)
		VALUES (@DOC_ID, 1, 'R', 0, @HT_LINS_R, @HT_SUB_TOT, 0, 0, 0, @HT_TOT_EXT_COST, 0, 0, @HT_AMT_DUE, 0, 0, @HT_TOT)

		-- -----------------------------------------------------
		-- INSERT 'V' RECORD INTO PS_DOC_AUDIT_LOG_TOT TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_AUDIT_LOG_TOT (DOC_ID, LOG_SEQ_NO, TOT_TYP, TOT_GFC_AMT, LINS, SUB_TOT, TOT_MISC, NORM_TAX_AMT, TAX_AMT, TOT_EXT_COST, 
			TOT_TND, TOT_CHNG, AMT_DUE, TOT_SVC_AMT, DEP_NET_CHANGE, TOT)
		VALUES (@DOC_ID, 1, 'V', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

		-- -----------------------------------------------------
		-- INSERT RECORD INTO PS_DOC_PMT TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_PMT (DOC_ID, PMT_SEQ_NO, PAY_COD_TYP, AMT, STR_ID, FINAL_PMT, STA_ID, CARD_IS_NEW, TKT_NO, SECURE_ECOMM_TRX, 
			PMT_LIN_TYP, PAY_COD, PAY_DAT, DEP_LIN_COPIED_TO_REL_DOC, HOME_CURNCY_AMT, EXCH_LOSS, SIG_IMG, SWIPED, SIG_IMG_VECTOR, EDC_AUTH_COD, 
			DESCR, EDC_AUTH_FLG, CURNCY_COD, EBT_BAL_REMAIN, EXCH_RATE_NUMER, EXCH_RATE_DENOM)
		VALUES (@DOC_ID, 1, 'A', 0, 1, 'Y', @STA_ID, 'N', @NXT_ORD_NO, 'N', 'T', 'A/R', NULL, 'N', 0, 0, NULL, 'N', NULL, NULL, 
			'Accounts Receivable', 'O', 'HOME', NULL, 1, 1)

		-- -----------------------------------------------------
		-- INSERT RECORD INTO PS_DOC_CONTACT TABLE
		-- -----------------------------------------------------
		INSERT INTO PS_DOC_CONTACT (DOC_ID, CONTACT_ID, NAM, FST_NAM, LST_NAM, SALUTATION, ADRS_1, ADRS_2, ADRS_3, CITY, STATE, ZIP_COD, CNTRY, PHONE_1, 
			PHONE_2, ADRS_ID, NAM_TYP, EMAIL_ADRS_1, EMAIL_ADRS_2, CONTCT_1, CONTCT_2, FAX_1, FAX_2)
		SELECT @DOC_ID, 1, NAM, FST_NAM, LST_NAM, SALUTATION, ADRS_1, ADRS_2, ADRS_3, CITY, STATE, ZIP_COD, CNTRY, PHONE_1, PHONE_2, '', 'B', EMAIL_ADRS_1, 
			EMAIL_ADRS_2, CONTCT_1, CONTCT_2, FAX_1, FAX_2
		FROM AR_CUST 
		WHERE CUST_NO = @CUST_NO

		IF(@@ROWCOUNT > 0)
			SELECT @RESULT = 'SUCCESS'
		ELSE
		BEGIN --> 4
			SELECT @RESULT = 'FAILURE'
			SET @ERR_MSG = 'UNABLE TO GET CUSTOMER CONTACT INFO FOR ' + CONVERT(VARCHAR(10), @CUST_NO)
			RAISERROR(@ERR_MSG, 18, 1)
			RETURN			
		END --< 4
		
		-- -----------------------------------------------------
		-- INSERT RECORDS INTO PS_DOC_TAX TABLE
		-- -----------------------------------------------------
		--UNCOMMENT WHEN DEPLOYED TO PRODUCTION EXEC USER_SP_CALC_TAX  @DOC_ID, @TAX_COD

		-- -----------------------------------------------------
		-- Delete entries from IM_PRC_WRK
		-- -----------------------------------------------------
		DELETE FROM IM_PRC_WRK WHERE SESS_ID = @SESS_ID

		-- -----------------------------------------------------
		-- GENERATE NXT_ORD_NO (FOR THE ORDER AFTER THIS ORDER) IN PS_STR_CFG_PS
		-- -----------------------------------------------------
		UPDATE PS_STR_CFG_PS
		SET NXT_ORD_NO = dbo.fnGetNextDocNumber(@NXT_ORD_NO)
	END TRY --< 2

	BEGIN CATCH
		SELECT @ERR_MSG = ERROR_MESSAGE();
		ROLLBACK TRANSACTION T1;
		RAISERROR(@ERR_MSG, 18, 1)
		SELECT @RESULT = 'FAILURE'
		RETURN
	END CATCH

	COMMIT TRANSACTION T1;

	SET @ORDER_NUMBER_SUBMITTED = @NXT_ORD_NO

END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_VERIFY_BARCODE_AND_ITEM_NO]    Script Date: 5/17/2013 8:51:00 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-29
-- Description:	Verify that item is on file for barcode - and that item (optional) and barcode match up
-- =============================================

-- exec USER_SP_MOBILE_VERIFY_BARCODE_AND_ITEM_NO '0103390202001019320200605611130225210116201910022530', '', 1, 0

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_VERIFY_BARCODE_AND_ITEM_NO]
	@BARCOD VARCHAR(55),
	@ITEM_NO VARCHAR(20) = NULL,
	@IS_WING_LEE_BARCOD AS BIT,
	@ITEM_NO_REQUIRED AS BIT,
	@RESULT VARCHAR(10) = NULL,
	@ERR_MSG VARCHAR(150) = NULL
AS
BEGIN --> 1
	SET NOCOUNT ON
	DECLARE @CARTON_STATUS_CODE AS INTEGER
	DECLARE @CARTON_STATUS_DESC AS VARCHAR(50)

	IF LEN(@ITEM_NO) = 0 OR @ITEM_NO IS NULL
	BEGIN --> 2
		IF @IS_WING_LEE_BARCOD = 1
		BEGIN --> 3
			SELECT @ITEM_NO = I.ITEM_NO, @CARTON_STATUS_CODE = C.CARTON_STATUS_CODE, @CARTON_STATUS_DESC = S.CARTON_STATUS_STATUS_DESC
			FROM USER_CARTON C
				INNER JOIN PO_VEND_ITEM V ON C.CARTON_VEND_NO = V.VEND_NO 
					AND C.CARTON_VEND_ITEM_NO = V.VEND_ITEM_NO
				INNER JOIN IM_ITEM I ON V.ITEM_NO = I.ITEM_NO
				INNER JOIN USER_CARTON_STATUS S ON C.CARTON_STATUS_CODE = S.CARTON_STATUIS_STATUS_CODE
			WHERE CARTON_FULL_BARCODE = @BARCOD	
				AND CARTON_STATUS_CODE >= 0
			ORDER BY C.CARTON_STATUS_CODE

			-- DO NOT ALLOW A CARTON THAT IS ALREADY ON ORDER OR SOLD TO BE ADDED TO A NEW ORDER
			IF @CARTON_STATUS_CODE NOT IN(10, 20)
				BEGIN --> 4
					SELECT @RESULT = 'FAILURE', @ERR_MSG = 'Unable to add this carton to order because it currently has a status of ' 
						+ UPPER(@CARTON_STATUS_DESC) + '.'
					RAISERROR(@ERR_MSG, 18, 1)
					RETURN
				END --< 4
		END --< 3
		ELSE IF @ITEM_NO_REQUIRED = 0 -- Auto-determine Item Number unless this particular barcode requires manual entry of Item Number (3rd party barcode)
		BEGIN --> 3
			SET @ITEM_NO = 
				(
				SELECT ITEM_NO
				FROM IM_ITEM
				WHERE IM_ITEM.BARCOD = @BARCOD		
				)		
		END	--< 3	
	END	--< 2

	IF LEN(@ITEM_NO) = 0 OR @ITEM_NO IS NULL
	BEGIN --> 2		
		IF @ITEM_NO_REQUIRED = 0
		BEGIN --> 3
			SELECT @RESULT = 'FAILURE', @ERR_MSG = 'Carton and/or Item # is not on file in CounterPoint. Add the carton and/or item to CounterPoint then try again.'
			RAISERROR(@ERR_MSG, 18, 1)
			RETURN
		END --< 3
	END --< 2				
	-- CHECK WHETHER ITEM IS ON FILE IN COUNTERPOINT
	ELSE IF(NOT EXISTS(SELECT 1 FROM IM_ITEM WHERE ITEM_NO = @ITEM_NO))
	BEGIN --> 2
		SELECT @RESULT = 'FAILURE', @ERR_MSG = 'Item # ( ' + @ITEM_NO + ' ) is not on file in CounterPoint. Add the item to CounterPoint then try again.'
		RAISERROR(@ERR_MSG, 18, 1)
		RETURN
	END --< 2	
	-- INSERT THE ORDER ITEM
	ELSE IF @IS_WING_LEE_BARCOD = 0
	-- UPC OR 3RD PARTY BARCODE
	BEGIN --> 2
		-- CHECK WHETHER ITEN NUMBER AND BARCODE MATCH UP
		IF(NOT EXISTS(SELECT 1 FROM IM_ITEM WHERE ITEM_NO = @ITEM_NO AND BARCOD = @BARCOD))
		BEGIN --> 3
			SELECT @RESULT = 'FAILURE', @ERR_MSG = 'Item # (' + @ITEM_NO + ') does not match barcode (' + @BARCOD + ').'
			RAISERROR(@ERR_MSG, 18, 1)
			RETURN		
		END --< 3			
	END --< 2
END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_CHECK_CARTON_ON_FILE]    Script Date: 5/17/2013 8:51:16 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-28
-- Description:	Check whether carton item info is on file in CounterPoint
-- =============================================

-- EXEC USER_SP_MOBILE_CHECK_CARTON_ON_FILE 

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_CHECK_CARTON_ON_FILE]
	@VEND_NO VARCHAR(20),
	@VEND_ITEM_NO VARCHAR(20)
AS
BEGIN --> 1
	SET NOCOUNT ON
	
	SELECT COUNT(*)
	FROM IM_ITEM 
	WHERE VEND_ITEM_NO = @VEND_ITEM_NO 
		AND ITEM_VEND_NO = @VEND_NO
	
END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_CANCEL_ORDER]    Script Date: 5/17/2013 8:51:37 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-25
-- Description:	Mark scanned items in picking/order as canceled
-- =============================================

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_CANCEL_ORDER]
	@PICKING_NO AS VARCHAR(50),
	@RESULT VARCHAR(10) = NULL,
	@ERR_MSG VARCHAR(100) = NULL
AS
BEGIN --> 1
	SET NOCOUNT ON
	
	UPDATE USER_SCANNED_ORDER
	SET SCAN_ORD_STATUS_CODE = -1
	WHERE SCAN_ORD_PICKING_NO = @PICKING_NO
	AND SCAN_ORD_STATUS_CODE = 0
	
	IF(@@ROWCOUNT > 0)
		SELECT @RESULT = 'SUCCESS'
	ELSE
	BEGIN --> 2
		SELECT @RESULT = 'FAILURE'
		RAISERROR(@ERR_MSG, 18, 1)
	END --< 2
	
	RETURN		

END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_DELETE_ORDER_ITEM]    Script Date: 5/17/2013 8:51:50 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-25
-- Description:	MARK ORDER ITEM AS DELETED
-- =============================================

-- EXEC USER_SP_MOBILE_DELETE_ORDER_ITEM 20

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_DELETE_ORDER_ITEM]
	@SCAN_ORD_ID AS INT,
	@RESULT VARCHAR(10) = NULL,
	@ERR_MSG VARCHAR(100) = NULL
AS
BEGIN --> 1
	SET NOCOUNT ON
	
	-- FOR SECURITY PURPOSES, CHECK WHETHER RECORD IS IN PENDING/UNPOSTED(?) STATUS
	IF(NOT EXISTS(SELECT 1 FROM USER_SCANNED_ORDER WHERE SCAN_ORD_ID = @SCAN_ORD_ID AND SCAN_ORD_STATUS_CODE = 0))
	BEGIN --> 2
		SELECT @RESULT = 'FAILURE', @ERR_MSG = 'This item has already been confirmed and cannot be deleted.'
		RAISERROR(@ERR_MSG, 18, 1)
		RETURN
	END --< 2	
	-- MARK THE ORDER ITEM AS DELETED (SET STATUS TO -1)
	ELSE
	BEGIN --> 2
		UPDATE USER_SCANNED_ORDER
		SET SCAN_ORD_STATUS_CODE = -1
		WHERE SCAN_ORD_ID = @SCAN_ORD_ID
		
		IF(@@ROWCOUNT > 0)
			SELECT @RESULT = 'SUCCESS'
		ELSE
		BEGIN --> 3	
			SELECT @RESULT = 'FAILURE'		
			RAISERROR(@ERR_MSG, 18, 1)
		END --< 3
		RETURN		
	END --< 2	
	
END --< 1

GO



USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_CHECK_WEIGHT_REQUIRED]    Script Date: 5/17/2013 8:52:13 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-24
-- Description:	Check whether barcode is tied to item that requires weight entry
-- =============================================

-- EXEC USER_SP_MOBILE_CHECK_WEIGHT_REQUIRED '4048705', 0

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_CHECK_WEIGHT_REQUIRED]
	@BARCOD VARCHAR(55),
	@IS_WING_LEE_BARCOD BIT
AS
BEGIN --> 1
	SET NOCOUNT ON
	
	DECLARE @RETURN AS INTEGER = 0
	
	IF @IS_WING_LEE_BARCOD = 1
	BEGIN --> 2
		IF EXISTS(
			SELECT 1
			FROM USER_CARTON C
				INNER JOIN PO_VEND_ITEM V ON C.CARTON_VEND_NO = V.VEND_NO 
					AND C.CARTON_VEND_ITEM_NO = V.VEND_ITEM_NO
				INNER JOIN IM_ITEM I ON V.ITEM_NO = I.ITEM_NO
			WHERE C.CARTON_FULL_BARCODE = @BARCOD
				AND I.IS_WEIGHED = 'Y'
		) SET @RETURN = 1 
	END --< 2
	ELSE
	BEGIN --> 2
		IF EXISTS(
			SELECT  1   
			FROM IM_BARCOD
				INNER JOIN IM_ITEM ON IM_BARCOD.ITEM_NO = IM_ITEM.ITEM_NO
			WHERE IM_BARCOD.BARCOD = @BARCOD
				AND IM_ITEM.IS_WEIGHED = 'Y'
		) SET @RETURN = 1 						
	END --< 2
	
	SELECT @RETURN	
END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_INSERT_ORDER_ITEM]    Script Date: 5/17/2013 8:52:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-21
-- Description:	Insert scanned order item
-- =============================================

-- exec USER_SP_MOBILE_INSERT_ORDER_ITEM '123', '', '123456789999', 0, 1, '1234', 0

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_INSERT_ORDER_ITEM]
	@CUST_NO VARCHAR(20),
	@ITEM_NO VARCHAR(20) = '',
	@BARCOD VARCHAR(55),
	@PIECES_WEIGHT AS FLOAT,
	@PICKING_NO AS VARCHAR(50),
	@IS_WING_LEE_BARCOD AS BIT,
	@RESULT VARCHAR(10) = NULL,
	@ERR_MSG VARCHAR(150) = NULL
AS
BEGIN --> 1
	SET NOCOUNT ON

	DECLARE @CARTON_STATUS_CODE AS INTEGER
	DECLARE @CARTON_STATUS_DESC AS VARCHAR(50)

	IF LEN(@ITEM_NO) = 0 
	BEGIN --> 2		
		IF @IS_WING_LEE_BARCOD = 1  -- WING LEE ITEM
		BEGIN --> 3
			SELECT TOP 1 @ITEM_NO = I.ITEM_NO, @CARTON_STATUS_CODE = C.CARTON_STATUS_CODE, @CARTON_STATUS_DESC = S.CARTON_STATUS_STATUS_DESC
			FROM USER_CARTON C
				INNER JOIN PO_VEND_ITEM V ON C.CARTON_VEND_NO = V.VEND_NO 
					AND C.CARTON_VEND_ITEM_NO = V.VEND_ITEM_NO
				INNER JOIN IM_ITEM I ON V.ITEM_NO = I.ITEM_NO
				INNER JOIN USER_CARTON_STATUS S ON C.CARTON_STATUS_CODE = S.CARTON_STATUIS_STATUS_CODE
			WHERE CARTON_FULL_BARCODE = @BARCOD	
				AND CARTON_STATUS_CODE >= 0
			ORDER BY C.CARTON_STATUS_CODE

			-- DO NOT ALLOW A CARTON THAT IS ALREADY ON ORDER OR SOLD TO BE ADDED TO A NEW ORDER
			IF @CARTON_STATUS_CODE NOT IN(10, 20)
				BEGIN --> 4
					SELECT @RESULT = 'FAILURE', @ERR_MSG = 'Unable to add this carton to order because it currently has a status of ' 
						+ UPPER(@CARTON_STATUS_DESC) + '.'
					RAISERROR(@ERR_MSG, 18, 1)
					RETURN
				END --< 4
		END --< 3
		ELSE -- NOT A WING LEE ITEM
		BEGIN --> 3
			SET @ITEM_NO = 
				(
				SELECT ITEM_NO
				FROM IM_ITEM
				WHERE IM_ITEM.BARCOD = @BARCOD		
				)		
		END	--< 3	
	END	--< 2

	IF @ITEM_NO IS NULL
	BEGIN --> 2
		SELECT @RESULT = 'FAILURE', @ERR_MSG = 'Carton and/or Item # is not on file in CounterPoint. Add the carton and/or item to CounterPoint then try again'
		RAISERROR(@ERR_MSG, 18, 1)
		RETURN
	END --< 2				
	-- CHECK WHETHER ITEM IS ON FILE IN COUNTERPOINT
	ELSE IF(NOT EXISTS(SELECT 1 FROM IM_ITEM WHERE ITEM_NO = @ITEM_NO))
	BEGIN --> 2
		SELECT @RESULT = 'FAILURE', @ERR_MSG = 'Item # (' + @ITEM_NO + ') is not on file in CounterPoint. Add the item to CounterPoint then try again.'
		RAISERROR(@ERR_MSG, 18, 1)
		RETURN
	END --< 2	
	-- INSERT THE ORDER ITEM
	ELSE IF @IS_WING_LEE_BARCOD = 1
	BEGIN --> 2
		-- FOR WING LEE BARCODE, GET SOME INFO FROM CARTON TABLE	
		INSERT INTO USER_SCANNED_ORDER (SCAN_ORD_CUST_NO, SCAN_ORD_BARCOD, SCAN_ORD_ITEM_NO,
			SCAN_ORD_STATUS_CODE, SCAN_ORD_PIECES_WEIGHT, SCAN_ORD_PICKING_NO, SCAN_ORD_DT_SCANNED, SCAN_ORD_IS_WINGLEE)
		SELECT @CUST_NO, @BARCOD, @ITEM_NO, 0, CARTON_PIECES_WEIGHT, @PICKING_NO, GETDATE(), @IS_WING_LEE_BARCOD
		FROM USER_CARTON
		WHERE CARTON_FULL_BARCODE = @BARCOD
			AND CARTON_STATUS_CODE >= 0
		
		IF(@@ROWCOUNT > 0)
			SELECT @RESULT = 'SUCCESS'
		ELSE
			BEGIN --> 3
				SELECT @RESULT = 'FAILURE', @ERR_MSG = 'WL DURING INSERT TO ORDER TABLE - ' + ERROR_MESSAGE();
				RAISERROR(@ERR_MSG, 18, 1)
			END --< 3		

		RETURN		
	END --< 2		
	ELSE -- UPC OR 3RD PARTY BARCODE
	BEGIN --> 2
		-- CHECK WHETHER ITEN NUMBER AND BARCODE MATCH UP
		IF(NOT EXISTS(SELECT 1 FROM IM_ITEM WHERE ITEM_NO = @ITEM_NO AND BARCOD = @BARCOD))
		BEGIN --> 3
			SELECT @RESULT = 'FAILURE', @ERR_MSG = 'Item # (' + @ITEM_NO + ') does not match barcode (' + @BARCOD + ').'
			RAISERROR(@ERR_MSG, 18, 1)
			RETURN		
		END --< 3
		-- IF ITEM HAS ALREADY BEEN SCANNED THIS PICKING AND IT'S NOT A WING LEE BARCODE, THEN UPDATE PREVIOUS
		-- SCAN WITH INCREMENTED QUANTITY INSTEAD OF INSERTING NEW RECORD	
		ELSE IF (EXISTS(SELECT 1 FROM USER_SCANNED_ORDER WHERE SCAN_ORD_PICKING_NO = @PICKING_NO 
			AND SCAN_ORD_BARCOD = @BARCOD AND SCAN_ORD_STATUS_CODE = 0))
		BEGIN --> 3
			UPDATE USER_SCANNED_ORDER
			SET SCAN_ORD_PIECES_WEIGHT = SCAN_ORD_PIECES_WEIGHT + @PIECES_WEIGHT, SCAN_ORD_DT_SCANNED = GETDATE()
			WHERE SCAN_ORD_PICKING_NO = @PICKING_NO 
				AND SCAN_ORD_BARCOD = @BARCOD
				AND SCAN_ORD_STATUS_CODE >= 0
					
			IF(@@ROWCOUNT > 0)
				SELECT @RESULT = 'SUCCESS'
			ELSE
			BEGIN --> 4
				SELECT @RESULT = 'FAILURE', @ERR_MSG = 'NON-WL DURING UPDATE TO ORDER TABLE - ' + ERROR_MESSAGE();
				RAISERROR(@ERR_MSG, 18, 1)
			END --< 4		

			RETURN			
		END --< 3
		ELSE -- FIRST SCAN OF THIS BARCODE THIS PICKING
			BEGIN --> 3
				INSERT INTO USER_SCANNED_ORDER
				(SCAN_ORD_CUST_NO, SCAN_ORD_BARCOD, SCAN_ORD_ITEM_NO, SCAN_ORD_STATUS_CODE, 
				SCAN_ORD_PIECES_WEIGHT, SCAN_ORD_PICKING_NO, SCAN_ORD_DT_SCANNED, SCAN_ORD_IS_WINGLEE)
				SELECT @CUST_NO, @BARCOD, @ITEM_NO, 0,
				@PIECES_WEIGHT, @PICKING_NO, GETDATE(), @IS_WING_LEE_BARCOD
				FROM IM_ITEM
				WHERE IM_ITEM.BARCOD = @BARCOD
				
				IF(@@ROWCOUNT > 0)
					SELECT @RESULT = 'SUCCESS'
				ELSE
				BEGIN --> 4
					SELECT @RESULT = 'FAILURE', @ERR_MSG = 'NON-WL DURING INSERT TO ORDER TABLE - ' + ERROR_MESSAGE();
					RAISERROR(@ERR_MSG, 18, 1)
				END --< 4	

				RETURN					
			END --< 3
	
	END --< 2	

END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_RETRIEVE_SCANNED_ITEMS_FOR_ORDER]    Script Date: 5/17/2013 8:52:49 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-21
-- Description:	Retrieve scanned items for a picking number
-- =============================================

--EXEC USER_SP_MOBILE_RETRIEVE_SCANNED_ITEMS_FOR_ORDER ''

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_RETRIEVE_SCANNED_ITEMS_FOR_ORDER]
	@PICKING_NO AS VARCHAR(50)
AS
BEGIN --> 1
	SET NOCOUNT ON
	
	-- ** New logic: if Wing Lee barcode, look at USER_CARTON table to get info...
		
	SELECT     USER_SCANNED_ORDER.SCAN_ORD_ID, USER_SCANNED_ORDER.SCAN_ORD_PIECES_WEIGHT, 
                      USER_SCANNED_ORDER.SCAN_ORD_PICKING_NO, USER_SCANNED_ORDER.SCAN_ORD_STATUS_CODE, IM_ITEM.DESCR, IM_ITEM.SUBCAT_COD, 
                      USER_SCANNED_ORDER.SCAN_ORD_BARCOD, USER_SCANNED_ORDER.SCAN_ORD_CUST_NO, USER_SCANNED_ORDER.SCAN_ORD_ITEM_NO
	FROM         IM_ITEM RIGHT OUTER JOIN
                      USER_SCANNED_ORDER ON IM_ITEM.ITEM_NO = USER_SCANNED_ORDER.SCAN_ORD_ITEM_NO
	WHERE SCAN_ORD_PICKING_NO = @PICKING_NO
		AND SCAN_ORD_STATUS_CODE = 0
	ORDER BY SCAN_ORD_DT_SCANNED DESC
END --< 1




GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_GET_CUSTOMER_DESC]    Script Date: 5/17/2013 8:53:02 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-21
-- Description:	Get customer description from customer number 
-- =============================================

--EXEC USER_SP_MOBILE_GET_CUSTOMER_DESC 'WINGLEE'

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_GET_CUSTOMER_DESC]
	@CUST_NO VARCHAR(15)
AS
BEGIN --> 1
	SET NOCOUNT ON

	SELECT NAM
	FROM AR_CUST
	WHERE CUST_NO = @CUST_NO	
END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_SEARCH_CUSTOMER]    Script Date: 5/17/2013 8:53:23 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-21
-- Description:	Search for Customer by number or name. 
-- =============================================

--EXEC USER_SP_MOBILE_SEARCH_CUSTOMER 'RO', 0

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_SEARCH_CUSTOMER]
	@CUST_NO_NAME VARCHAR(15)= NULL
AS
BEGIN --> 1
	SET NOCOUNT ON
		
	SELECT CUST_NO, NAM, 0 AS SORT_FIRST
	FROM AR_CUST
	WHERE (@CUST_NO_NAME IS NULL 
	OR CUST_NO LIKE '%' + @CUST_NO_NAME + '%'
	OR NAM LIKE '%' + @CUST_NO_NAME + '%')
	ORDER BY NAM
		
END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_CANCEL_RECEIVER]    Script Date: 5/17/2013 8:53:38 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-20
-- Description:	Mark scanned items in receiver as canceled
-- =============================================

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_CANCEL_RECEIVER]
	@RECEIVER_NO AS VARCHAR(50),
	@RESULT VARCHAR(10) = NULL,
	@ERR_MSG VARCHAR(100) = NULL
AS
BEGIN --> 1
	SET NOCOUNT ON
	
	UPDATE USER_CARTON
	SET CARTON_STATUS_CODE = -1
	WHERE CARTON_RECEIVER_NO = @RECEIVER_NO
	AND CARTON_STATUS_CODE = 0
	
	IF(@@ROWCOUNT > 0)
		SELECT @RESULT = 'SUCCESS'
	ELSE
	BEGIN --> 2
		SELECT @RESULT = 'FAILURE'
		RAISERROR(@ERR_MSG, 18, 1)
	END --< 2
	
	RETURN		

END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_COMPLETE_RECEIVER]    Script Date: 5/17/2013 8:53:51 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-20
-- Description:	Mark scanned items in receiver as complete
-- =============================================

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_COMPLETE_RECEIVER]
	@RECEIVER_NO AS VARCHAR(50),
	@RESULT VARCHAR(10) = NULL,
	@ERR_MSG VARCHAR(100) = NULL
AS
BEGIN --> 1
	SET NOCOUNT ON
	
	UPDATE USER_CARTON
	SET CARTON_STATUS_CODE = 10
	WHERE CARTON_RECEIVER_NO = @RECEIVER_NO
	AND CARTON_STATUS_CODE = 0
	
	IF(@@ROWCOUNT > 0)
		SELECT @RESULT = 'SUCCESS'
	ELSE
	BEGIN --> 2	
		SELECT @RESULT = 'FAILURE', @ERR_MSG = 'DURING UPDATE TO CARTON TABLE - ' + ERROR_MESSAGE();
		RAISERROR(@ERR_MSG, 18, 1)
	END --< 2
	RETURN		

END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_DELETE_CARTON]    Script Date: 5/17/2013 8:54:08 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-20
-- Description:	Mark carton as deleted
-- =============================================

-- EXEC USER_SP_MOBILE_DELETE_CARTON 20

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_DELETE_CARTON]
	@CARTON_NO AS INT,
	@RESULT VARCHAR(10) = NULL,
	@ERR_MSG VARCHAR(100) = NULL
AS
BEGIN --> 1
	SET NOCOUNT ON
	
	-- FOR SECURITY PURPOSES, CHECK WHETHER RECORD IS IN PENDING/UNPOSTED(?) STATUS
	IF(NOT EXISTS(SELECT 1 FROM USER_CARTON WHERE CARTON_NO = @CARTON_NO AND CARTON_STATUS_CODE = 0))
	BEGIN --> 2
		SELECT @RESULT = 'FAILURE', @ERR_MSG = 'This item has already been confirmed and cannot be deleted.'
		RAISERROR(@ERR_MSG, 18, 1)
		RETURN
	END --< 2	
	-- MARK THE CARTON AS DELETED (SET STATUS TO -1)
	ELSE
	BEGIN --> 2
		UPDATE USER_CARTON
		SET CARTON_STATUS_CODE = -1
		WHERE CARTON_NO = @CARTON_NO
		
		IF(@@ROWCOUNT > 0)
			SELECT @RESULT = 'SUCCESS'
		ELSE
		BEGIN --> 3	
			SELECT @RESULT = 'FAILURE'		
			RAISERROR(@ERR_MSG, 18, 1)
		END --< 3
		RETURN		
	END --< 2	
	
END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_GET_VENDOR_DESC]    Script Date: 5/17/2013 8:54:31 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-18
-- Description:	Get vendor description from vendor number 
-- =============================================

--EXEC USER_SP_MOBILE_GET_VENDOR_DESC 'WINGLEE'

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_GET_VENDOR_DESC]
	@VEND_NO VARCHAR(15)
AS
BEGIN --> 1
	SET NOCOUNT ON

	SELECT NAM
	FROM PO_VEND
	WHERE VEND_NO = @VEND_NO	
END --< 1

GO


USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_RETRIEVE_SCANNED_ITEMS_FOR_RECEIVER]    Script Date: 5/17/2013 8:54:45 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-14
-- Description:	Retrieve scanned items for a receiver number
-- =============================================

--EXEC USER_SP_MOBILE_RETRIEVE_SCANNED_ITEMS_FOR_RECEIVER ''

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_RETRIEVE_SCANNED_ITEMS_FOR_RECEIVER]
	@RECEIVER_NO AS VARCHAR(50)
AS
BEGIN --> 1
	SET NOCOUNT ON
		
	SELECT USER_CARTON.CARTON_NO, USER_CARTON.CARTON_PIECES_WEIGHT, USER_CARTON.CARTON_RECEIVER_NO, 
		USER_CARTON.CARTON_STATUS_CODE, IM_ITEM.DESCR, PO_VEND_ITEM.VEND_NO, USER_CARTON.CARTON_FULL_BARCODE, USER_CARTON.CARTON_VEND_ITEM_NO
	FROM PO_VEND_ITEM 
		LEFT OUTER JOIN IM_ITEM ON PO_VEND_ITEM.ITEM_NO = IM_ITEM.ITEM_NO 
		RIGHT OUTER JOIN USER_CARTON ON PO_VEND_ITEM.VEND_NO = USER_CARTON.CARTON_VEND_NO AND
			PO_VEND_ITEM.VEND_ITEM_NO = USER_CARTON.CARTON_VEND_ITEM_NO
	WHERE USER_CARTON.CARTON_RECEIVER_NO = @RECEIVER_NO
		AND CARTON_STATUS_CODE = 0
	ORDER BY CARTON_NO DESC
END --< 1
GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_INSERT_CARTON]    Script Date: 5/17/2013 8:54:58 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-14
-- Description:	Insert scanned carton info
-- =============================================

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_INSERT_CARTON]
	@VEND_NO VARCHAR(20),
	@VEND_ITEM_NO VARCHAR(20),
	@BARCOD VARCHAR(55),
	@PIECES_WEIGHT AS FLOAT,
	@RECEIVER_NO AS VARCHAR(50),
	@RESULT VARCHAR(10) = NULL,
	@ERR_MSG VARCHAR(150) = NULL
AS
BEGIN --> 1
	SET NOCOUNT ON

	-- CHECK WHETHER ITEM IS ON FILE IN COUNTERPOINT
	IF(NOT EXISTS(SELECT 1 FROM IM_ITEM WHERE VEND_ITEM_NO = @VEND_ITEM_NO AND ITEM_VEND_NO = @VEND_NO))
	BEGIN --> 2
		SELECT @RESULT = 'FAILURE', @ERR_MSG = 'Vendor Item # (' + @VEND_ITEM_NO + ') is not on file in CounterPoint for Vendor # (' +
			@VEND_NO + '). Select correct vendor, or add the item to CounterPoint then try again.'
		RAISERROR(@ERR_MSG, 18, 1)
		RETURN
	END --< 2
	-- CHECK WHETHER CARTON HAS ALREADY BEEN SCANNED
	ELSE IF(EXISTS(SELECT 1 FROM USER_CARTON WHERE CARTON_FULL_BARCODE = @BARCOD 
		AND CARTON_STATUS_CODE >= 0))	
	BEGIN --> 2
		SELECT @RESULT = 'FAILURE', @ERR_MSG = 'Barcode already scanned for this Wing Lee item.'
		RAISERROR(@ERR_MSG, 18, 1)
		RETURN
	END --< 2	
	-- INSERT THE CARTON
	ELSE
	BEGIN --> 2
		INSERT INTO USER_CARTON (CARTON_VEND_ITEM_NO, CARTON_STATUS_CODE, CARTON_FULL_BARCODE, 
			CARTON_PIECES_WEIGHT, CARTON_RECEIVER_NO, CARTON_DT_RECEIVED, CARTON_VEND_NO)
		SELECT @VEND_ITEM_NO, 0, @BARCOD, @PIECES_WEIGHT, @RECEIVER_NO, GETDATE(), @VEND_NO
		
		IF(@@ROWCOUNT > 0)
			SELECT @RESULT = 'SUCCESS'
		ELSE
			BEGIN --> 3
				SELECT @RESULT = 'FAILURE', @ERR_MSG = 'WL DURING INSERT TO CARTON TABLE - ' + ERROR_MESSAGE();
				RAISERROR(@ERR_MSG, 18, 1)
				RETURN		
			END --< 3
	END --< 2	
	

END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_CHECK_CARTON_ALREADY_RECEIVED]    Script Date: 5/17/2013 8:55:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-14
-- Description:	Check whether carton has already been received
-- =============================================

-- EXEC USER_SP_MOBILE_CHECK_CARTON_ALREADY_RECEIVED '0103390202001015320200041111130316210116922810031630'

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_CHECK_CARTON_ALREADY_RECEIVED]
	@BARCOD VARCHAR(55)
AS
BEGIN --> 1
	SET NOCOUNT ON
	
	SELECT COUNT(*)
	FROM USER_CARTON
	WHERE CARTON_FULL_BARCODE = @BARCOD
	AND CARTON_STATUS_CODE >= 0
END --< 1

GO

USE [WENGLEE]
GO

/****** Object:  StoredProcedure [dbo].[USER_SP_MOBILE_SEARCH_VENDOR]    Script Date: 5/17/2013 8:55:23 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Kevin Key
-- Create date: 2013-04-08
-- Description:	Search for Vendor by number or name. 
-- =============================================

--EXEC USER_SP_MOBILE_SEARCH_VENDOR 'RO', 0

CREATE PROCEDURE [dbo].[USER_SP_MOBILE_SEARCH_VENDOR]
	@VEND_NO_NAME VARCHAR(15)= NULL,
	@SHOW_WING_LEE_FIRST INT = 0
AS
BEGIN --> 1
	SET NOCOUNT ON
	DECLARE @WING_LEE VARCHAR(15) = 'WINGLEE' -- SET THIS TO THE VENDOR # FOR WING LEE
	
	IF @SHOW_WING_LEE_FIRST = 1
		SELECT VEND_NO, NAM, 1 AS SORT_FIRST
		FROM PO_VEND
		WHERE VEND_NO = @WING_LEE	
		UNION	
		SELECT VEND_NO, NAM, 0 AS SORT_FIRST
		FROM PO_VEND
		WHERE (@VEND_NO_NAME IS NULL 
		OR VEND_NO LIKE '%' + @VEND_NO_NAME + '%'
		OR NAM LIKE '%' + @VEND_NO_NAME + '%')
		AND VEND_NO <> @WING_LEE
		ORDER BY SORT_FIRST DESC, NAM
	ELSE
		SELECT VEND_NO, NAM, 0 AS SORT_FIRST
		FROM PO_VEND
		WHERE (@VEND_NO_NAME IS NULL 
		OR VEND_NO LIKE '%' + @VEND_NO_NAME + '%'
		OR NAM LIKE '%' + @VEND_NO_NAME + '%')
		ORDER BY NAM
		
END --< 1

GO






